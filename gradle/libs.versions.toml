[versions]
# Nyeste versjon finner du her: https://github.com/navikt/hm-soknadsbehandling-db/packages
behovsmeldingsmodell = "25.183.162133"
bigquery = "2.52.0"
cacheApi = "1.1.1"
caffeine = "3.2.1"
classgraph = "4.8.180"
commons-compress = "1.27.1"
commons-csv = "1.14.0"
commons-io = "2.19.0"
commons-text = "1.13.1"
confluent = "8.0.0"
# Nyeste versjon finner du her: https://github.com/navikt/hm-contract-pdl-avro/packages
contractPdlAvro = "1.0.2"
cyclonedx = "2.3.1"
ehcache = "3.10.8"
flyway = "11.10.0"
graphql = "8.8.1"
graphql-java = "24.1"
h2 = "2.3.232"
handlebars = "4.4.0"
hibernate = "7.0.4.Final"
hikaricp = "6.3.0"
htmlSanitizer = "20240325.1"
jackson = "2.19.1"
java = "21"
javaJwt = "4.5.0"
jedis = "6.0.0"
jetbrains-annotations = "26.0.2"
joseJwt = "10.3.1"
jsoup = "1.21.1"
junit = "5.13.2"
kafka = "3.9.1"
koin = "4.1.0"
konfig = "1.6.10.0"
kotest = "5.9.1"
kotest-ktor = "2.0.0"
kotlin = "2.2.0"
kotlin-logging = "7.0.7"
kotlin-logging-deprecated = "3.0.5"
kotlinx-coroutines = "1.10.2"
kotlinx-metadata = "0.9.0"
kotlinx-serialization = "1.9.0"
kotliquery = "1.9.1"
ktor = "3.2.0"
lettuce = "6.7.1.RELEASE"
logback = "1.5.18"
logback-logstash = "8.1"
logback-syslog4j = "1.0.0"
micrometer = "1.15.1"
microprofile = "4.1"
mockk = "1.14.4"
mustache = "0.9.14"
netty = "4.2.2.Final"
nocommons = "0.16.0"
openapi = "7.14.0"
openhtmltopdf = "1.1.28"
oracle = "23.8.0.25.04"
postgresql = "42.7.7"
prometheus = "1.3.8"
prometheus-deprecated = "0.16.0"
protobuf = "4.31.1"
rapidsAndRivers = "2025061811051750237542.df739400e55e"
reactor-kafka = "1.3.23"
shadow = "8.1.1"
slf4j = "2.0.17"
spotless = "7.0.4"
swagger = "2.2.34"
tbdLibs = "2025.05.27-09.58-a0d8bd0d"
testcontainers = "1.21.3"
tmsKtorTokenSupport = "5.0.4"
tmsVarsel = "2.1.1"
unleash = "11.0.1"
unleash-deprecated = "4.4.1"
valkey = "5.4.0"
versionCatalogUpdate = "1.0.0"
versions = "0.52.0"
wiremock = "3.13.1"
zjsonpatch = "0.4.16"

[plugins]
bom = { id = "org.cyclonedx.bom", version.ref = "cyclonedx" }
flyway = { id = "org.flywaydb.flyway", version.ref = "flyway" }
graphql = { id = "com.expediagroup.graphql", version.ref = "graphql" }
kotlin-jpa = { id = "org.jetbrains.kotlin.plugin.jpa", version.ref = "kotlin" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
ktor = { id = "io.ktor.plugin", version.ref = "ktor" }
openapi = { id = "org.openapi.generator", version.ref = "openapi" }
shadow = { id = "com.github.johnrengelman.shadow", version.ref = "shadow" }
spotless = { id = "com.diffplug.spotless", version.ref = "spotless" }
version-catalog-update = { id = "nl.littlerobots.version-catalog-update", version.ref = "versionCatalogUpdate" }
versions = { id = "com.github.ben-manes.versions", version.ref = "versions" }

[libraries]
azure-exchange = { module = "no.nav.tms.token.support:azure-exchange", version.ref = "tmsKtorTokenSupport" }
azure-validation = { module = "no.nav.tms.token.support:azure-validation", version.ref = "tmsKtorTokenSupport" }
azure-validation-mock = { module = "no.nav.tms.token.support:azure-validation-mock", version.ref = "tmsKtorTokenSupport" }
cache-api = { module = "javax.cache:cache-api", version.ref = "cacheApi" }
caffeine = { module = "com.github.ben-manes.caffeine:caffeine", version.ref = "caffeine" }
classgraph = { module = "io.github.classgraph:classgraph", version.ref = "classgraph" }
commons-compress = { module = "org.apache.commons:commons-compress", version.ref = "commons-compress" }
commons-csv = { module = "org.apache.commons:commons-csv", version.ref = "commons-csv" }
commons-io = { module = "commons-io:commons-io", version.ref = "commons-io" }
commons-text = { module = "org.apache.commons:commons-text", version.ref = "commons-text" }
ehcache = { module = "org.ehcache:ehcache", version.ref = "ehcache" }
flyway-core = { module = "org.flywaydb:flyway-core", version.ref = "flyway" }
flyway-database-oracle = { module = "org.flywaydb:flyway-database-oracle", version.ref = "flyway" }
flyway-database-postgresql = { module = "org.flywaydb:flyway-database-postgresql", version.ref = "flyway" }
google-cloud-bigquery = { module = "com.google.cloud:google-cloud-bigquery", version.ref = "bigquery" }
graphql = { module = "com.graphql-java:graphql-java", version.ref = "graphql-java" }
graphql-client-jackson = { module = "com.expediagroup:graphql-kotlin-client-jackson", version.ref = "graphql" }
graphql-gradle-plugin = { module = "com.expediagroup:graphql-kotlin-gradle-plugin", version.ref = "graphql" }
graphql-ktor-client = { module = "com.expediagroup:graphql-kotlin-ktor-client", version.ref = "graphql" }
graphql-ktor-server = { module = "com.expediagroup:graphql-kotlin-ktor-server", version.ref = "graphql" }
h2 = { module = "com.h2database:h2", version.ref = "h2" }
handlebars = { module = "com.github.jknack:handlebars", version.ref = "handlebars" }
hibernate-core = { module = "org.hibernate.orm:hibernate-core", version.ref = "hibernate" }
hikaricp = { module = "com.zaxxer:HikariCP", version.ref = "hikaricp" }
hm-behovsmeldingsmodell = { module = "no.nav.hjelpemidler:hm-behovsmeldingsmodell", version.ref = "behovsmeldingsmodell" }
hm-contract-pdl-avro = { module = "no.nav.hjelpemidler:hm-contract-pdl-avro", version.ref = "contractPdlAvro" }
idporten-sidecar = { module = "no.nav.tms.token.support:idporten-sidecar", version.ref = "tmsKtorTokenSupport" }
idporten-sidecar-mock = { module = "no.nav.tms.token.support:idporten-sidecar-mock", version.ref = "tmsKtorTokenSupport" }
jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations", version.ref = "jackson" }
jackson-bom = { module = "com.fasterxml.jackson:jackson-bom", version.ref = "jackson" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-dataformat-cbor = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor", version.ref = "jackson" }
jackson-dataformat-csv = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-csv", version.ref = "jackson" }
jackson-dataformat-xml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-xml", version.ref = "jackson" }
jackson-dataformat-yaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "jackson" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
java-jwt = { module = "com.auth0:java-jwt", version.ref = "javaJwt" }
jclOverSlf4j = { module = "org.slf4j:jcl-over-slf4j", version.ref = "slf4j" }
jedis = { module = "redis.clients:jedis", version.ref = "jedis" }
jetbrains-annotations = { module = "org.jetbrains:annotations", version.ref = "jetbrains-annotations" }
jsoup = { module = "org.jsoup:jsoup", version.ref = "jsoup" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit" }
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit" }
kafka-avro-serializer = { module = "io.confluent:kafka-avro-serializer", version.ref = "confluent" }
kafka-clients = { module = "org.apache.kafka:kafka-clients", version.ref = "kafka" }
kafka-streams = { module = "org.apache.kafka:kafka-streams", version.ref = "kafka" }
kafka-streams-avro-serde = { module = "io.confluent:kafka-streams-avro-serde", version.ref = "confluent" }
kafka-streams-test-utils = { module = "org.apache.kafka:kafka-streams-test-utils", version.ref = "kafka" }
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-core-coroutines = { module = "io.insert-koin:koin-core-coroutines", version.ref = "koin" }
koin-ktor3 = "io.insert-koin:koin-ktor3:4.1.0-Beta8"
koin-logger-slf4j = { module = "io.insert-koin:koin-logger-slf4j", version.ref = "koin" }
koin-test-junit5 = { module = "io.insert-koin:koin-test-junit5", version.ref = "koin" }
konfig-deprecated = { module = "com.natpryce:konfig", version.ref = "konfig" }
kotest-assertions-core = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-assertions-json = { module = "io.kotest:kotest-assertions-json", version.ref = "kotest" }
kotest-assertions-ktor = { module = "io.kotest.extensions:kotest-assertions-ktor", version.ref = "kotest-ktor" }
kotest-runner-junit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotlin-bom = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "kotlin" }
kotlin-gradle-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
kotlin-logging = { module = "io.github.oshai:kotlin-logging", version.ref = "kotlin-logging" }
kotlin-logging-deprecated = { module = "io.github.microutils:kotlin-logging", version.ref = "kotlin-logging-deprecated" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlin-serialization = { module = "org.jetbrains.kotlin:kotlin-serialization", version.ref = "kotlin" }
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
kotlin-test-junit5 = { module = "org.jetbrains.kotlin:kotlin-test-junit5", version.ref = "kotlin" }
kotlinx-coroutines-bom = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-bom", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-debug = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-debug", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-reactive = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactive", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-slf4j = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
kotlinx-metadata-jvm = { module = "org.jetbrains.kotlinx:kotlinx-metadata-jvm", version.ref = "kotlinx-metadata" }
kotlinx-serialization-bom = { module = "org.jetbrains.kotlinx:kotlinx-serialization-bom", version.ref = "kotlinx-serialization" }
kotlinx-serialization-cbor = { module = "org.jetbrains.kotlinx:kotlinx-serialization-cbor", version.ref = "kotlinx-serialization" }
kotlinx-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlinx-serialization" }
kotlinx-serialization-hocon = { module = "org.jetbrains.kotlinx:kotlinx-serialization-hocon", version.ref = "kotlinx-serialization" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
kotlinx-serialization-properties = { module = "org.jetbrains.kotlinx:kotlinx-serialization-properties", version.ref = "kotlinx-serialization" }
kotliquery = { module = "com.github.seratch:kotliquery", version.ref = "kotliquery" }
ktor-bom = { module = "io.ktor:ktor-bom", version.ref = "ktor" }
ktor-client-apache = { module = "io.ktor:ktor-client-apache", version.ref = "ktor" }
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-encoding = { module = "io.ktor:ktor-client-encoding", version.ref = "ktor" }
ktor-client-jackson = { module = "io.ktor:ktor-client-jackson", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }
ktor-client-resources = { module = "io.ktor:ktor-client-resources", version.ref = "ktor" }
ktor-gradle-plugin = { module = "io.ktor.plugin:plugin", version.ref = "ktor" }
ktor-resources = { module = "io.ktor:ktor-resources", version.ref = "ktor" }
ktor-serialization-jackson = { module = "io.ktor:ktor-serialization-jackson", version.ref = "ktor" }
ktor-server-auth = { module = "io.ktor:ktor-server-auth", version.ref = "ktor" }
ktor-server-auth-jwt = { module = "io.ktor:ktor-server-auth-jwt", version.ref = "ktor" }
ktor-server-call-id = { module = "io.ktor:ktor-server-call-id", version.ref = "ktor" }
ktor-server-call-logging = { module = "io.ktor:ktor-server-call-logging", version.ref = "ktor" }
ktor-server-cio = { module = "io.ktor:ktor-server-cio", version.ref = "ktor" }
ktor-server-compression = { module = "io.ktor:ktor-server-compression", version.ref = "ktor" }
ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-cors = { module = "io.ktor:ktor-server-cors", version.ref = "ktor" }
ktor-server-double-receive = { module = "io.ktor:ktor-server-double-receive", version.ref = "ktor" }
ktor-server-metrics-micrometer = { module = "io.ktor:ktor-server-metrics-micrometer", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-rate-limit = { module = "io.ktor:ktor-server-rate-limit", version.ref = "ktor" }
ktor-server-request-validation = { module = "io.ktor:ktor-server-request-validation", version.ref = "ktor" }
ktor-server-resources = { module = "io.ktor:ktor-server-resources", version.ref = "ktor" }
ktor-server-sse = { module = "io.ktor:ktor-server-sse", version.ref = "ktor" }
ktor-server-status-pages = { module = "io.ktor:ktor-server-status-pages", version.ref = "ktor" }
ktor-server-swagger = { module = "io.ktor:ktor-server-swagger", version.ref = "ktor" }
ktor-server-test-host = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }
ktor-utils = { module = "io.ktor:ktor-utils", version.ref = "ktor" }
lettuce = { module = "io.lettuce:lettuce-core", version.ref = "lettuce" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
logback-core = { module = "ch.qos.logback:logback-core", version.ref = "logback" }
logback-syslog4j = { module = "com.papertrailapp:logback-syslog4j", version.ref = "logback-syslog4j" }
logstash-logback-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logback-logstash" }
micrometer-bom = { module = "io.micrometer:micrometer-bom", version.ref = "micrometer" }
micrometer-core = { module = "io.micrometer:micrometer-core", version.ref = "micrometer" }
micrometer-registry-prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "micrometer" }
micrometer-registry-prometheus-deprecated = { module = "io.micrometer:micrometer-registry-prometheus-simpleclient", version.ref = "micrometer" }
microprofile-openapi = { module = "org.eclipse.microprofile.openapi:microprofile-openapi-api", version.ref = "microprofile" }
mockk = { module = "io.mockk:mockk-jvm", version.ref = "mockk" }
mustache = { module = "com.github.spullara.mustache.java:compiler", version.ref = "mustache" }
netty-bom = { module = "io.netty:netty-bom", version.ref = "netty" }
nimbus-jose-jwt = { module = "com.nimbusds:nimbus-jose-jwt", version.ref = "joseJwt" }
nocommons = { module = "no.bekk.bekkopen:nocommons", version.ref = "nocommons" }
ojdbc-bom = { module = "com.oracle.database.jdbc:ojdbc-bom", version.ref = "oracle" }
ojdbc11 = { module = "com.oracle.database.jdbc:ojdbc11", version.ref = "oracle" }
ojdbc11-production = { module = "com.oracle.database.jdbc:ojdbc11-production", version.ref = "oracle" }
openapi-gradle-plugin = { module = "org.openapitools:openapi-generator-gradle-plugin", version.ref = "openapi" }
openhtmltopdf-core = { module = "io.github.openhtmltopdf:openhtmltopdf-core", version.ref = "openhtmltopdf" }
openhtmltopdf-pdfbox = { module = "io.github.openhtmltopdf:openhtmltopdf-pdfbox", version.ref = "openhtmltopdf" }
openhtmltopdf-slf4j = { module = "io.github.openhtmltopdf:openhtmltopdf-slf4j", version.ref = "openhtmltopdf" }
openhtmltopdf-svg-support = { module = "io.github.openhtmltopdf:openhtmltopdf-svg-support", version.ref = "openhtmltopdf" }
owasp-java-html-sanitizer = { module = "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer", version.ref = "htmlSanitizer" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
prometheus-client-deprecated = { module = "io.prometheus:simpleclient_common", version.ref = "prometheus-deprecated" }
prometheus-metrics-bom = { module = "io.prometheus:prometheus-metrics-bom", version.ref = "prometheus" }
prometheus-metrics-core = { module = "io.prometheus:prometheus-metrics-core", version.ref = "prometheus" }
prometheus-metrics-simpleclient-bridge = { module = "io.prometheus:prometheus-metrics-simpleclient-bridge", version.ref = "prometheus" }
protobuf-bom = { module = "com.google.protobuf:protobuf-bom", version.ref = "protobuf" }
rapidsAndRivers = { module = "com.github.navikt:rapids-and-rivers", version.ref = "rapidsAndRivers" }
reactor-kafka = { module = "io.projectreactor.kafka:reactor-kafka", version.ref = "reactor-kafka" }
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
slf4j-bom = { module = "org.slf4j:slf4j-bom", version.ref = "slf4j" }
slf4j-jdk-platform-logging = { module = "org.slf4j:slf4j-jdk-platform-logging", version.ref = "slf4j" }
slf4j-simple = { module = "org.slf4j:slf4j-simple", version.ref = "slf4j" }
spotless-gradle-plugin = { module = "com.diffplug.spotless:spotless-plugin-gradle", version.ref = "spotless" }
swagger-annotations = { module = "io.swagger.core.v3:swagger-annotations", version.ref = "swagger" }
tbdLibs-kafka = { module = "com.github.navikt.tbd-libs:kafka", version.ref = "tbdLibs" }
tbdLibs-rapidsAndRivers = { module = "com.github.navikt.tbd-libs:rapids-and-rivers", version.ref = "tbdLibs" }
tbdLibs-rapidsAndRivers-api = { module = "com.github.navikt.tbd-libs:rapids-and-rivers-api", version.ref = "tbdLibs" }
tbdLibs-rapidsAndRivers-test = { module = "com.github.navikt.tbd-libs:rapids-and-rivers-test", version.ref = "tbdLibs" }
testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-bom = { module = "org.testcontainers:testcontainers-bom", version.ref = "testcontainers" }
testcontainers-jdbc = { module = "org.testcontainers:jdbc", version.ref = "testcontainers" }
testcontainers-junit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-kafka = { module = "org.testcontainers:kafka", version.ref = "testcontainers" }
testcontainers-mockserver = { module = "org.testcontainers:mockserver", version.ref = "testcontainers" }
testcontainers-oracle-free = { module = "org.testcontainers:oracle-free", version.ref = "testcontainers" }
testcontainers-oracle-xe = { module = "org.testcontainers:oracle-xe", version.ref = "testcontainers" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }
tokendings-exchange = { module = "no.nav.tms.token.support:tokendings-exchange", version.ref = "tmsKtorTokenSupport" }
tokenx-validation = { module = "no.nav.tms.token.support:tokenx-validation", version.ref = "tmsKtorTokenSupport" }
tokenx-validation-mock = { module = "no.nav.tms.token.support:tokenx-validation-mock", version.ref = "tmsKtorTokenSupport" }
ucp11 = { module = "com.oracle.database.jdbc:ucp11", version.ref = "oracle" }
unleash = { module = "io.getunleash:unleash-client-java", version.ref = "unleash" }
unleash-deprecated = { module = "no.finn.unleash:unleash-client-java", version.ref = "unleash-deprecated" }
valkey = { module = "io.valkey:valkey-java", version.ref = "valkey" }
varsel-kotlin-builder = { module = "no.nav.tms.varsel:kotlin-builder", version.ref = "tmsVarsel" }
wiremock = { module = "org.wiremock:wiremock", version.ref = "wiremock" }
zjsonpatch = { module = "com.flipkart.zjsonpatch:zjsonpatch", version.ref = "zjsonpatch" }

[bundles]
graphql-client = [
    "graphql-client-jackson",
    "graphql-ktor-client",
]
jackson = [
    "jackson-databind",
    "jackson-datatype-jsr310",
    "jackson-module-kotlin",
]
junit = [
    "junit-jupiter-api",
    "junit-jupiter-engine",
    "junit-jupiter-params",
]
kotest = [
    "kotest-assertions-core",
    "kotest-assertions-json",
]
ktor-client = [
    "ktor-client-cio",
    "ktor-client-content-negotiation",
    "ktor-client-core",
    "ktor-client-logging",
    "ktor-client-mock",
    "ktor-serialization-jackson",
]
ktor-server = [
    "ktor-serialization-jackson",
    "ktor-server-auth",
    "ktor-server-auth-jwt",
    "ktor-server-call-id",
    "ktor-server-call-logging",
    "ktor-server-content-negotiation",
    "ktor-server-core",
    "ktor-server-metrics-micrometer",
    "ktor-server-netty",
    "ktor-server-status-pages",
]
ktor-server-test = [
    "kotest-assertions-core",
    "kotest-assertions-json",
    "kotest-assertions-ktor",
    "kotlin-test-junit5",
    "kotlinx-coroutines-test",
    "ktor-server-test-host",
    "mockk",
    "nimbus-jose-jwt",
]
logging-runtime = [
    "logback-classic",
    "logstash-logback-encoder",
]
test = [
    "kotest-assertions-core",
    "kotest-assertions-json",
    "kotlin-test-junit5",
    "kotlinx-coroutines-test",
    "mockk",
]
